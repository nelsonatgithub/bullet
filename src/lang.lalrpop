use builder::{Builder, NodeResult};
use node::Op;

grammar<'b>(builder: &'b Builder);

pub Expr: NodeResult<'input> = {
    <l:Expr> "+" <r:Factor> => Ok(builder.add(l?, r?)),
    <l:Expr> "-" <r:Factor> => Ok(builder.sub(l?, r?)),
    "-" <f:Factor> => Ok(builder.neg(f?)),
    Factor,
};

pub Factor: NodeResult<'input> = {
    <l:Factor> "*" <r:Pow> => Ok(builder.mul(l?, r?)),
    <l:Factor> "Â·" <r:Pow> => Ok(builder.mul(l?, r?)),
    <l:Factor> "/" <r:Pow> => builder.div(l?, r?),
    <l:r"[0-9]+"> <r:Pow> => Ok(builder.mul(builder.decimal(l)?, r?)),
    <l:r"\pL+"> <r:Pow> => builder.apply_named(l, r?),
    Pow,
};

pub Op: NodeResult<'input> = {
    <v:r"d/d(\pL+)"> => builder.op(Op::Diff(v[3..].into())),
};

pub Pow: NodeResult<'input> = {
    <b:Term> "^" <e:Pow> => builder.pow(b?, e?),
    Term
};

pub Term: NodeResult<'input> = {
    Num,
    Var,
    Op,
    "(" <Expr> ")",
};

Num: NodeResult<'input> = <s:r"[0-9]+"> => builder.decimal(s);
Var: NodeResult<'input> = <s:r"\pL+"> => Ok(builder.var(s));
