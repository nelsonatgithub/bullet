use builder::{Builder, NodeResult, Error};
use node::Op;
use eval::Command;

grammar<'b>(builder: &'b Builder);

pub Expr: NodeResult<'input> = {
    <l:Expr> "+" <r:Factor> => builder.add(l?, r?),
    <l:Expr> "-" <r:Factor> => builder.sub(l?, r?),
    "-" <f:Factor> => builder.neg(f?),
    Factor,
};

pub Factor: NodeResult<'input> = {
    <l:Factor> "*" <r:Pow> => builder.mul(l?, r?),
    <l:Factor> "Â·" <r:Pow> => builder.mul(l?, r?),
    <l:Factor> "/" <r:Pow> => builder.div(l?, r?),
    Pow,
};

pub Op: NodeResult<'input> = {
    <v:r"d/d(\pL+)"> => Ok(builder.op(Op::Diff(v[3..].into()))),
};

pub Pow: NodeResult<'input> = {
    <b:Term> "^" <e:Pow> => builder.pow(b?, e?),
    <l:Name> <r:Pow> => builder.apply_named(l, r?),
    <l:r"[0-9]+"> <r:Pow> => builder.mul(builder.decimal(l)?, r?),
    Term
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T> => {
        let mut v = v;
        v.push(e );
        v
    },
};

pub CommaE = Comma<Expr>;
pub Tuple: NodeResult<'input> = {
    "(" <t:CommaE> ")" => {
        let mut t = t;
        match t.len() {
	    1 => t.pop().unwrap(),
	    _ => builder.tuple(t)
        }
    },
};

pub Term: NodeResult<'input> = {
    Num,
    NumFloat,
    Var,
    Op,
    Tuple,
};

Num: NodeResult<'input> = <s:r"[0-9]+"> => builder.decimal(s);
NumFloat: NodeResult<'input> = <s:r"[0-9]+\.[0-9]+"> => builder.decimal_float(s);
Var: NodeResult<'input> = <s:Name> => Ok(builder.var(s));
Name: &'input str = r"\pL+";

pub CommaS = Comma<Name>;
pub Command: Result<Command<'input>, Error<'input>> = {
    "def" <f:r"\pL+"> "(" <a:CommaS> ")" ":=" <e:Expr> => Ok(Command::Define(f, a, e?)),
    <e:Expr> => Ok(Command::Expr(e?))
};
